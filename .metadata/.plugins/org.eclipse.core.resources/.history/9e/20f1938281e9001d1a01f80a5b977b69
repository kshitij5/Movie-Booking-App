package com.moviebookingapp.techacadeemy.services;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.stereotype.Service;

import com.moviebookingapp.techacadeemy.entities.Booking;
import com.moviebookingapp.techacadeemy.entities.Seat;
import com.moviebookingapp.techacadeemy.entities.Show;
import com.moviebookingapp.techacadeemy.entities.Ticket;
import com.moviebookingapp.techacadeemy.entities.User;
import com.moviebookingapp.techacadeemy.exception.BookingNotFoundException;
import com.moviebookingapp.techacadeemy.repository.BookingRepository;
import com.moviebookingapp.techacadeemy.repository.MovieRepository;
import com.moviebookingapp.techacadeemy.repository.ShowRepository;
import com.moviebookingapp.techacadeemy.repository.TicketRepository;

@Service
public class BookingServiceImpl implements BookingService {

	@Autowired
	private BookingRepository bookingRepository;
	@Autowired
	MovieRepository moviesRepository;
	@Autowired
	ShowRepository showRepository;
	@Autowired
	TicketRepository ticketRepository;
	

	@Override
	public List<Booking> viewBookingList() throws BookingNotFoundException {
		List<Booking> bk = bookingRepository.findAll();
		/*
		 * if (bk.size() == 0) throw new BookingNotFoundException("No bookings found");
		 */
		return bk;
	}

	//TODO : rectify --> save ticket for each seat, then create booking for all ticket
	@Override
	public Booking addBooking(Booking booking, String customerId, Integer showId) throws BookingNotFoundException {
		User user = new User();
		Show show=new Show();
		/*
		 * if (bookingRepository.existsById(booking.getTransactionId())) { throw new
		 * BookingNotFoundException("Booking with this transcationId is already done");
		 * } else {}
		 */
		if(showId!=null) {
			//todo: ucomment either of any next line
				//customer = custoRepository.getOne(customerId);
//				show=showRepository.findById(showId).get();
				show.setBooking(booking);
				//booking.setCustomer(customer);
				booking.setShow(show);
		}
			bookingRepository.save(booking);
			showRepository.save(show);
		return bookingRepository.findById(booking.getBookingId()).get();
	}

	@Override
	public Booking updateBooking(Booking booking) throws BookingNotFoundException {
		bookingRepository.save(booking);
		return bookingRepository.findById(booking.getBookingId()).get();
	}


	@Override
	public List<Booking> showAllBookingsByMovieId(int movieid) throws BookingNotFoundException {
		// TODO: add custom query  to fetch booking with given movie id
		Query query = new Query();
		query.addCriteria(Criteria.where(""))
//		List<Booking> bk = query.getAllByMovieId(movieid);
//		/*
//		 * if (bk.size() == 0) throw new BookingNotFoundException("No bookings found");
//		 */
//		return bk;
		return null;
	}

}
